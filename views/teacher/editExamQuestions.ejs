<%- include('../layout', {
  title: 'Evalio | Gérer les questions',
  body: `

  <!-- Main Content -->
  <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="px-4 sm:px-6 md:px-0 flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold mb-4">Questions pour <%= locals.exam ? exam.title : '' %></h1>
        <p class="mt-1 text-sm text-gray-600">Ajoutez, modifiez ou supprimez des questions pour l'examen "<%= typeof exam !== 'undefined' ? exam.title : '' %>"</p>
      </div>
      <div class="flex items-center space-x-4">
        <div class="text-sm text-gray-600">
          <span class="font-medium">Lien d'accès:</span>
          <code class="ml-2 px-2 py-1 bg-gray-100 rounded"><%= exam.accessUrl %></code>
          <button onclick="navigator.clipboard.writeText('<%= exam.accessUrl %>')" class="ml-2 text-blue-600 hover:text-blue-700">
            <i class="ri-file-copy-line"></i>
          </button>
        </div>
        <button id="addQuestionBtn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
          <i class="ri-add-line mr-2"></i>
          Ajouter une question
        </button>
      </div>
    </div>

    <!-- Question List -->
    <div class="mt-8">
      <div id="questionList" class="bg-white shadow-sm rounded-lg divide-y divide-gray-200">
        <% 
        const questions = locals.exam?.questions || [];
        if (questions.length > 0) { 
        %>
          <% questions.forEach((question, index) => { %>
            <div class="question-item p-6" data-question-index="<%= index %>">
              <div class="flex items-start justify-between">
                <div>
                  <h3 class="question-number text-lg font-medium text-gray-900">Question <%= index + 1 %></h3>
                  <p class="mt-1 text-sm text-gray-500"><%= question.statement %></p>
                  <div class="mt-2 text-sm text-gray-500">
                    <span class="inline-flex items-center px-2 py-1 rounded-md bg-gray-100 text-gray-700 mr-2">
                      <i class="ri-time-line mr-1"></i>
                      <%= question.duration %> min
                    </span>
                    <span class="inline-flex items-center px-2 py-1 rounded-md bg-gray-100 text-gray-700">
                      <i class="ri-star-line mr-1"></i>
                      <%= question.score %> points
                    </span>
                  </div>
                  <% if (question.media?.type) { %>
                    <div class="mt-2">
                      <span class="text-sm text-gray-500">
                        <i class="ri-attachment-2"></i>
                        Pièce jointe: <%= question.media.type %>
                      </span>
                    </div>
                  <% } %>
                  <% if (question.type === 'mcq' && Array.isArray(question.options)) { %>
                    <div class="mt-3 space-y-2">
                      <% question.options.forEach((option, optIndex) => { %>
                        <div class="flex items-center">
                          <span class="w-6 h-6 flex items-center justify-center <%= option.isCorrect ? 'text-green-600' : 'text-gray-400' %>">
                            <i class="<%= option.isCorrect ? 'ri-checkbox-circle-fill' : 'ri-checkbox-blank-circle-line' %>"></i>
                          </span>
                          <span class="ml-2 text-sm text-gray-600"><%= option.text %></span>
                        </div>
                      <% }); %>
                    </div>
                  <% } %>
                </div>
                <div class="ml-4 flex-shrink-0">
                  <button type="button" class="edit-question-btn text-blue-600 hover:text-blue-800 mr-2" data-index="<%= index %>">
                    <i class="ri-edit-line"></i>
                  </button>
                  <button type="button" class="delete-question-btn text-red-600 hover:text-red-800" data-index="<%= index %>">
                    <i class="ri-delete-bin-line"></i>
                  </button>
                </div>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <div class="p-6 text-center text-gray-500">
            <p>Aucune question n'a été ajoutée à cet examen.</p>
          </div>
        <% } %>
      </div>
    </div>

    <!-- Add/Edit Question Modal -->
    <div id="questionModal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
      <div class="bg-white rounded-lg shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto">
        <form id="questionForm" class="p-6 space-y-6">
          <div class="flex justify-between items-center">
            <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Ajouter une question</h3>
            <button type="button" onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
              <i class="ri-close-line text-xl"></i>
            </button>
          </div>

          <!-- Question Type -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Type de question</label>
            <div class="mt-2 grid grid-cols-2 gap-4">
              <button type="button" class="questionTypeBtn p-4 border rounded-lg text-center" data-type="direct">
                <i class="ri-text-spacing"></i>
                <span class="block mt-2">Question directe</span>
              </button>
              <button type="button" class="questionTypeBtn p-4 border rounded-lg text-center" data-type="mcq">
                <i class="ri-list-check-2"></i>
                <span class="block mt-2">QCM</span>
              </button>
            </div>
          </div>

          <!-- Question Statement -->
          <div>
            <label for="statement" class="block text-sm font-medium text-gray-700">Énoncé</label>
            <textarea id="statement" name="statement" rows="3" required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"></textarea>
          </div>

          <!-- Media Attachment -->
          <div>
            <label class="block text-sm font-medium text-gray-700">Pièce jointe (optionnel)</label>
            <div class="mt-2 grid grid-cols-3 gap-4">
              <button type="button" class="mediaTypeBtn p-4 border rounded-lg text-center" data-type="image">
                <i class="ri-image-line"></i>
                <span class="block mt-2">Image</span>
              </button>
              <button type="button" class="mediaTypeBtn p-4 border rounded-lg text-center" data-type="audio">
                <i class="ri-mic-line"></i>
                <span class="block mt-2">Audio</span>
              </button>
              <button type="button" class="mediaTypeBtn p-4 border rounded-lg text-center" data-type="video">
                <i class="ri-video-line"></i>
                <span class="block mt-2">Vidéo</span>
              </button>
            </div>
            <div id="mediaUpload" class="hidden mt-4">
              <input type="file" id="mediaFile" class="block w-full text-sm text-gray-500
                file:mr-4 file:py-2 file:px-4
                file:rounded-full file:border-0
                file:text-sm file:font-semibold
                file:bg-blue-50 file:text-blue-700
                hover:file:bg-blue-100">
            </div>
          </div>

          <!-- Answer Section -->
          <div id="directAnswerSection" class="hidden space-y-4">
            <div>
              <label for="answer" class="block text-sm font-medium text-gray-700">Réponse</label>
              <input type="text" id="answer" name="answer"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
            </div>
            <div>
              <label for="toleranceRate" class="block text-sm font-medium text-gray-700">
                Taux de tolérance (%)
                <span class="text-xs text-gray-500">pour les fautes de frappe ou la casse</span>
              </label>
              <input type="number" id="toleranceRate" name="toleranceRate" min="0" max="100" value="0"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
            </div>
          </div>

          <div id="mcqAnswerSection" class="hidden space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">Options de réponse</label>
              <div id="mcqOptions" class="mt-2 space-y-2">
                <!-- MCQ options will be added here dynamically -->
              </div>
              <button type="button" onclick="addMcqOption()" class="mt-2 text-sm text-blue-600 hover:text-blue-700">
                <i class="ri-add-line"></i> Ajouter une option
              </button>
            </div>
          </div>

          <!-- Common Settings -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label for="score" class="block text-sm font-medium text-gray-700">Score</label>
              <input type="number" id="score" name="score" min="0" required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
            </div>
            <div>
              <label for="duration" class="block text-sm font-medium text-gray-700">Durée (secondes)</label>
              <input type="number" id="duration" name="duration" min="1" required
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
            </div>
          </div>

          <!-- Form Actions -->
          <div class="flex justify-end space-x-3">
            <button type="button" onclick="closeModal()"
              class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              Annuler
            </button>
            <button type="submit"
              class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
              Enregistrer
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>

  <script>
    // Initialize state variables
    const state = {
      currentQuestionType: null,
      currentMediaType: 'none',
      editingQuestionIndex: null,
      examData: null
    };
    
    // Safely parse exam data
    try {
      state.examData = JSON.parse('<%- JSON.stringify(exam || {}) %>');
    } catch (error) {
      console.error('Error parsing exam data:', error);
      state.examData = { questions: [] };
    }
    
    // Question management
    function openModal(isEdit = false) {
      const modal = document.getElementById('questionModal');
      const title = document.getElementById('modalTitle');
      
      if (modal && title) {
        modal.classList.remove('hidden');
        title.textContent = isEdit ? 'Modifier la question' : 'Ajouter une question';
        submitBtn.textContent = isEditing ? 'Enregistrer' : 'Ajouter';
      }
    }

    function closeModal() {
      const modal = document.getElementById('questionModal');
      const form = document.getElementById('questionForm');
      
      if (modal && form) {
        modal.classList.add('hidden');
        form.reset();
        
        // Reset state
        currentQuestionType = null;
        currentMediaType = 'none';
        editingQuestionIndex = null;
        
        // Reset UI
        document.querySelectorAll('.questionTypeBtn, .mediaTypeBtn').forEach(btn => {
          btn.classList.remove('ring-2', 'ring-blue-500');
        });
        
        document.getElementById('directAnswerSection').classList.add('hidden');
        document.getElementById('mcqAnswerSection').classList.add('hidden');
        document.getElementById('mediaUpload').classList.add('hidden');
        
        // Clear MCQ options
        const mcqOptions = document.getElementById('mcqOptions');
        if (mcqOptions) {
          mcqOptions.innerHTML = '';
        }
      }
    }

    // Form management
    function resetForm() {
      document.getElementById('questionForm').reset();
      currentQuestionType = null;
      currentMediaType = 'none';
      editingQuestionIndex = null;
      document.querySelectorAll('.questionTypeBtn').forEach(btn => btn.classList.remove('ring-2', 'ring-blue-500'));
      document.querySelectorAll('.mediaTypeBtn').forEach(btn => btn.classList.remove('ring-2', 'ring-blue-500'));
      document.getElementById('mediaUpload').classList.add('hidden');
      document.getElementById('directAnswerSection').classList.add('hidden');
      document.getElementById('mcqAnswerSection').classList.add('hidden');
      document.getElementById('mcqOptions').innerHTML = '';
    }

    // Question type selection
    document.querySelectorAll('.questionTypeBtn').forEach(btn => {
      btn.addEventListener('click', function() {
        const type = this.dataset.type;
        currentQuestionType = type;
        document.querySelectorAll('.questionTypeBtn').forEach(b => b.classList.remove('ring-2', 'ring-blue-500'));
        this.classList.add('ring-2', 'ring-blue-500');
        
        document.getElementById('directAnswerSection').classList.toggle('hidden', type !== 'direct');
        document.getElementById('mcqAnswerSection').classList.toggle('hidden', type !== 'mcq');
      });
    });

    // Media type selection
    document.querySelectorAll('.mediaTypeBtn').forEach(btn => {
      btn.addEventListener('click', function() {
        const type = this.dataset.type;
        currentMediaType = type;
        document.querySelectorAll('.mediaTypeBtn').forEach(b => b.classList.remove('ring-2', 'ring-blue-500'));
        this.classList.add('ring-2', 'ring-blue-500');
        document.getElementById('mediaUpload').classList.remove('hidden');
      });
    });

    // MCQ options management
    function addMcqOption() {
      const optionsContainer = document.getElementById('mcqOptions');
      if (!optionsContainer) return;
      
      const optionDiv = document.createElement('div');
      optionDiv.className = 'mcq-option flex items-center space-x-2 mt-2';
      
      const input = document.createElement('input');
      input.type = 'text';
      input.className = 'flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500';
      input.placeholder = 'Option de réponse';
      
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'rounded border-gray-300 text-blue-600 focus:ring-blue-500';
      
      const deleteBtn = document.createElement('button');
      deleteBtn.type = 'button';
      deleteBtn.className = 'text-red-600 hover:text-red-800';
      deleteBtn.innerHTML = '<i class="ri-delete-bin-line"></i>';
      deleteBtn.addEventListener('click', () => optionDiv.remove());
      
      optionDiv.append(input, checkbox, deleteBtn);
      optionsContainer.appendChild(optionDiv);
    }

    // Form submission
    document.getElementById('questionForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      try {
        // Validate form data
        const formData = new FormData(event.target);
        const questionText = formData.get('statement');
        const duration = parseInt(formData.get('duration'));
        const score = parseInt(formData.get('score'));
        
        if (!questionText || !duration || !score || !currentQuestionType) {
          throw new Error('Veuillez remplir tous les champs obligatoires');
        }
        
        const questionData = {
          type: currentQuestionType,
          statement: questionText,
          duration: duration,
          score: score
        };
        
        if (currentQuestionType === 'direct') {
          const directAnswer = formData.get('answer');
          const tolerance = parseFloat(formData.get('toleranceRate'));
          
          if (!directAnswer || isNaN(tolerance)) {
            throw new Error('Veuillez fournir une réponse et une tolérance valides');
          }
          
          questionData.answer = directAnswer;
          questionData.toleranceRate = tolerance;
        } else {
          const options = [];
          const optionElements = document.querySelectorAll('.mcq-option');
          
          if (optionElements.length < 2) {
            throw new Error('Ajoutez au moins 2 options pour le QCM');
          }
          
          let hasCorrectAnswer = false;
          optionElements.forEach(option => {
            const text = option.querySelector('input[type="text"]').value;
            const isCorrect = option.querySelector('input[type="checkbox"]').checked;
            
            if (!text) {
              throw new Error('Toutes les options doivent avoir un texte');
            }
            
            if (isCorrect) {
              hasCorrectAnswer = true;
            }
            
            options.push({ text, isCorrect });
          });
          
          if (!hasCorrectAnswer) {
            throw new Error('Sélectionnez au moins une réponse correcte');
          }
          
          questionData.options = options;
        }
        
        // Handle media upload
        if (currentMediaType !== 'none') {
          const mediaFile = document.getElementById('mediaFile').files[0];
          if (mediaFile) {
            const allowedTypes = {
              image: ['image/jpeg', 'image/png', 'image/gif'],
              audio: ['audio/mpeg', 'audio/wav'],
              video: ['video/mp4', 'video/webm']
            };
            
            if (!allowedTypes[currentMediaType].includes(mediaFile.type)) {
              throw new Error(`Type de fichier non supporté pour ${currentMediaType}`);
            }
            
            const mediaFormData = new FormData();
            mediaFormData.append('media', mediaFile);
            
            const uploadResponse = await fetch('/upload', {
              method: 'POST',
              body: mediaFormData
            });
            
            if (!uploadResponse.ok) {
              throw new Error('Erreur lors du téléchargement du média');
            }
            
            const { path } = await uploadResponse.json();
            questionData.media = {
              type: currentMediaType,
              path: path
            };
          }
        }
        
        // Send request to server
        const url = `/teacher/exams/${examData._id}/questions${editingQuestionIndex !== null ? '/' + editingQuestionIndex : ''}`;
        const method = editingQuestionIndex !== null ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(questionData)
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          throw new Error('Failed to save question');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Une erreur est survenue lors de l\'enregistrement de la question: ' + error.message);
      }
    });

    // Question editing
    function editQuestion(index) {
      editingQuestionIndex = index;
      const question = examData.questions[index];
      
      openModal(true);
      setQuestionType(question.type);
      
      document.getElementById('statement').value = question.statement;
      document.getElementById('score').value = question.score;
      document.getElementById('duration').value = question.duration;
      
      if (question.media.type !== 'none') {
        setMediaType(question.media.type);
      }
      
      if (question.type === 'direct') {
        document.getElementById('answer').value = question.answer;
        document.getElementById('toleranceRate').value = question.toleranceRate;
      } else if (question.type === 'mcq') {
        question.options.forEach(option => {
          const optionsContainer = document.getElementById('mcqOptions');
          const optionDiv = document.createElement('div');
          optionDiv.className = 'flex items-center space-x-2';
          const optionIndex = optionsContainer.children.length;
          
          optionDiv.innerHTML = `
            <input type="text" name="options[${optionIndex}][text]" value="${option.text}"
              class="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
            <input type="checkbox" name="options[${optionIndex}][isCorrect]" ${option.isCorrect ? 'checked' : ''}
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
            <button type="button" onclick="this.parentElement.remove()" class="text-gray-400 hover:text-red-500">
              <i class="ri-delete-bin-line"></i>
            </button>
          `;
          
          optionsContainer.appendChild(optionDiv);
        });
      }
    }

    // Question deletion
    async function deleteQuestion(index) {
      if (!confirm('Êtes-vous sûr de vouloir supprimer cette question ?')) {
        return;
      }
      
      try {
        const response = await fetch(`/teacher/exams/${examData._id}/questions/${index}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          // Remove the question from the UI
          const questionElement = document.querySelector(`[data-question-index="${index}"]`);
          if (questionElement) {
            questionElement.remove();
          }
          // Update the examData
          examData.questions.splice(index, 1);
          // Update question numbers
          document.querySelectorAll('.question-item').forEach((item, idx) => {
            item.setAttribute('data-question-index', idx);
            const numberElement = item.querySelector('.question-number');
            if (numberElement) {
              numberElement.textContent = `Question ${idx + 1}`;
            }
          });
        } else {
          const data = await response.json();
          throw new Error(data.message || 'Failed to delete question');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Une erreur est survenue lors de la suppression de la question: ' + error.message);
      }
    }

    function initializeEventListeners() {
      // Add question button
      document.getElementById('addQuestionBtn').addEventListener('click', () => openModal(false));
      
      // Question type buttons
      document.querySelectorAll('.questionTypeBtn').forEach(btn => {
        btn.addEventListener('click', function() {
          const type = this.dataset.type;
          currentQuestionType = type;
          document.querySelectorAll('.questionTypeBtn').forEach(b => b.classList.remove('ring-2', 'ring-blue-500'));
          this.classList.add('ring-2', 'ring-blue-500');
          
          document.getElementById('directAnswerSection').classList.toggle('hidden', type !== 'direct');
          document.getElementById('mcqAnswerSection').classList.toggle('hidden', type !== 'mcq');
        });
      });
      
      // Media type buttons
      document.querySelectorAll('.mediaTypeBtn').forEach(btn => {
        btn.addEventListener('click', function() {
          const type = this.dataset.type;
          currentMediaType = type;
          document.querySelectorAll('.mediaTypeBtn').forEach(b => b.classList.remove('ring-2', 'ring-blue-500'));
          this.classList.add('ring-2', 'ring-blue-500');
          document.getElementById('mediaUpload').classList.remove('hidden');
        });
      });
      
      // Edit buttons
      document.querySelectorAll('.edit-question-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          editQuestion(index);
        });
      });
      
      // Delete buttons
      document.querySelectorAll('.delete-question-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          deleteQuestion(index);
        });
      });
    }
    
    // Initialize all event listeners
    initializeEventListeners();
    
    // Form validation
    function validateForm() {
      const form = document.getElementById('questionForm');
      if (!form) return false;
      
      const formData = new FormData(form);
      const questionText = formData.get('statement');
      const duration = parseInt(formData.get('duration'));
      const score = parseInt(formData.get('score'));
      
      if (!questionText || !duration || !score || !currentQuestionType) {
        alert('Veuillez remplir tous les champs obligatoires');
        return false;
      }
      
      if (currentQuestionType === 'direct') {
        const answer = formData.get('answer');
        const tolerance = parseFloat(formData.get('toleranceRate'));
        
        if (!answer || isNaN(tolerance)) {
          alert('Veuillez fournir une réponse et une tolérance valides');
          return false;
        }
      } else if (currentQuestionType === 'mcq') {
        const options = document.querySelectorAll('.mcq-option');
        
        if (options.length < 2) {
          alert('Ajoutez au moins 2 options pour le QCM');
          return false;
        }
        
        let hasCorrectAnswer = false;
        for (const option of options) {
          const text = option.querySelector('input[type="text"]').value;
          const isCorrect = option.querySelector('input[type="checkbox"]').checked;
          
          if (!text) {
            alert('Toutes les options doivent avoir un texte');
            return false;
          }
          
          if (isCorrect) hasCorrectAnswer = true;
        }
        
        if (!hasCorrectAnswer) {
          alert('Sélectionnez au moins une réponse correcte');
          return false;
        }
      }
      
      return true;
    }
    
    // Initialize form
    function initializeForm() {
      const addQuestionBtn = document.getElementById('addQuestionBtn');
      if (addQuestionBtn) {
        addQuestionBtn.addEventListener('click', () => openModal(false));
      }
      
      // Question type buttons
      document.querySelectorAll('.questionTypeBtn').forEach(btn => {
        btn.addEventListener('click', function() {
          const type = this.dataset.type;
          if (!type) return;
          
          currentQuestionType = type;
          document.querySelectorAll('.questionTypeBtn').forEach(b => {
            b.classList.remove('ring-2', 'ring-blue-500');
          });
          this.classList.add('ring-2', 'ring-blue-500');
          
          const directSection = document.getElementById('directAnswerSection');
          const mcqSection = document.getElementById('mcqAnswerSection');
          
          if (directSection && mcqSection) {
            directSection.classList.toggle('hidden', type !== 'direct');
            mcqSection.classList.toggle('hidden', type !== 'mcq');
          }
        });
      });
      
      // Media type buttons
      document.querySelectorAll('.mediaTypeBtn').forEach(btn => {
        btn.addEventListener('click', function() {
          const type = this.dataset.type;
          if (!type) return;
          
          currentMediaType = type;
          document.querySelectorAll('.mediaTypeBtn').forEach(b => {
            b.classList.remove('ring-2', 'ring-blue-500');
          });
          this.classList.add('ring-2', 'ring-blue-500');
          
          const mediaUpload = document.getElementById('mediaUpload');
          if (mediaUpload) {
            mediaUpload.classList.remove('hidden');
          }
        });
      });
      
      // Edit and delete buttons
      document.querySelectorAll('.edit-question-btn, .delete-question-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          if (isNaN(index)) return;
          
          if (this.classList.contains('edit-question-btn')) {
            editQuestion(index);
          } else {
            deleteQuestion(index);
          }
        });
      });
      
      // Form submission
      const form = document.getElementById('questionForm');
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          if (!validateForm()) return;
          await submitQuestion(e);
        });
      }
    }
    
    // Initialize everything when the DOM is ready
    document.addEventListener('DOMContentLoaded', initializeForm);
  </script>
` }) %>
